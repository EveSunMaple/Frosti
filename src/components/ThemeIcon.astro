<button
  class="flex justify-center card bg-base-100 btn btn-ghost w-auto h-10"
  id="themeToggle"
>
  <label for="themeToggle1" id="themeLabel1"
    ><span class="sr-only">Theme Toggle</span>
    <input type="checkbox" id="themeToggle1" />
    <svg
      class="swap-on fill-current w-10 h-10"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"
      ></path>
    </svg>
    <svg
      class="swap-off fill-current w-10 h-10"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"
      ></path>
    </svg>
  </label>
</button>

<button
  class="flex justify-center card bg-base-100 transition-none btn btn-ghost w-auto h-10"
  id="backToTop"
  ><span class="sr-only">To Top Button</span>
  <svg
    viewBox="0 0 24 24"
    fill="fill-current w-10 h-10"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
    <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"
    ></g>
    <g id="SVGRepo_iconCarrier">
      <path
        d="M12 5V19M12 5L6 11M12 5L18 11"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </g></svg
  >
</button>

<script>
  document.addEventListener("astro:page-load", () => {
    const setTheme = (theme: string) => {
      document.documentElement.setAttribute("data-theme", theme);
      localStorage.setItem("theme", theme);
    };

    const storedTheme = localStorage.getItem("theme");
    if (storedTheme) {
      setTheme(storedTheme);
    } else {
      const userPreferredTheme = window.matchMedia(
        "(prefers-color-scheme: dracula)",
      ).matches
        ? "dracula"
        : "winter";
      setTheme(userPreferredTheme);
    }

    const themeToggle = document.getElementById("themeToggle");
    const themeLabel1 = document.getElementById(
      "themeLabel1",
    ) as HTMLLabelElement;
    const themeToggle1 = document.getElementById(
      "themeToggle1",
    ) as HTMLInputElement;
    const themeLabel2 = document.getElementById(
      "themeLabel2",
    ) as HTMLLabelElement;
    const themeToggle2 = document.getElementById(
      "themeToggle2",
    ) as HTMLInputElement;

    const syncThemeToggle = () => {
      const currentTheme = localStorage.getItem("theme");
      // Check and update the classes for themeLabel elements if they exist
      if (themeLabel1 && themeLabel2 && themeToggle1 && themeToggle2) {
        themeLabel1.classList.toggle("active", currentTheme === "dracula");
        themeLabel2.classList.toggle("active", currentTheme === "winter");
        const isChecked = currentTheme === "dracula";
        themeToggle1.checked = isChecked;
        themeToggle2.checked = isChecked;
      }
    };

    syncThemeToggle();

    // Add classes if elements are not null
    if (themeLabel1) {
      themeLabel1.classList.add("swap");
      themeLabel1.classList.add("swap-rotate");
    }
    if (themeLabel2) {
      themeLabel2.classList.add("swap");
      themeLabel2.classList.add("swap-rotate");
    }

    const sidebarToggleClick = () => {
      themeToggle1.checked = !themeToggle1.checked;
      const currentTheme = localStorage.getItem("theme");
      const newTheme = currentTheme === "winter" ? "dracula" : "winter";
      setTheme(newTheme);
      syncThemeToggle();
    };

    const handleToggleClick = () => {
      const currentTheme = localStorage.getItem("theme");
      const newTheme = currentTheme === "winter" ? "dracula" : "winter";
      setTheme(newTheme);
      syncThemeToggle();
    };

    // Add event listeners if elements are not null
    if (themeToggle1 && themeToggle) {
      themeToggle1.disabled = true;
      themeToggle.addEventListener("click", sidebarToggleClick);
    }
    if (themeToggle2) {
      themeToggle2.addEventListener("click", handleToggleClick);
    }

    const backToTopButton = document.getElementById("backToTop");

    if (backToTopButton) {
      backToTopButton.addEventListener("click", () => {
        window.scrollTo({
          top: 0,
          behavior: "smooth",
        });
      });
    }
  });
</script>
