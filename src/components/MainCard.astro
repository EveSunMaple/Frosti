---
import { t } from "@config";
import { Icon } from "astro-icon/components";
import Card from "@/components/temple/Card.astro";
import { Image } from "astro:assets";
import type { PostData } from "@interfaces/data";

export interface MainCardProps extends PostData {
  infoIcon?: string; // Icon for the info button
  helpText?: string; // Custom help text (defaults to "Learn More")
  textOverlay?: string; // Text to overlay on background when no image
  showTextBackground?: boolean; // Show text background when no image
  headerClass?: string; // Additional classes for the header
  extraClasses?: string; // Additional classes for the whole card
}

const {
  title,
  description,
  image,
  infoIcon = "lucide:help-circle",
  helpText = t("label.learnMore"),
  textOverlay,
  showTextBackground = true,
  headerClass = "",
  extraClasses = "",
} = Astro.props as MainCardProps;

// Create a more descriptive label for the button
const accessibleHelpText = `${helpText}: ${title}`;
---

<Card class={`overflow-hidden ${extraClasses}`}>
  {
    image ? (
      // With image - show image with overlay title
      <div class="relative">
        <div class="aspect-video w-full overflow-hidden">
          <Image
            src={image}
            alt={title}
            width={1200}
            height={630}
            format="webp"
            loading="eager"
            class="w-full h-full object-cover"
          />
        </div>

        <div class="absolute bottom-4 left-4 lg:bottom-6 lg:left-6">
          <div class="inline-block bg-black/60 backdrop-blur-md px-4 py-2 rounded-xl border border-white/40 shadow-lg">
            <h1 class="text-xl sm:text-2xl lg:text-4xl font-bold text-white">{title}</h1>
          </div>
        </div>


        {description && (
          <div class="absolute bottom-4 right-4 lg:bottom-6 lg:right-6">
            <div class="dropdown dropdown-top dropdown-end dropdown-hover">
              <label
                tabindex="0"
                aria-label={accessibleHelpText}
                class="group btn btn-sm px-2 bg-black/60 backdrop-blur-md hover:bg-black/80 border border-white/40 text-white shadow-lg rounded-full flex items-center gap-0 transition-all duration-300 ease-in-out"
              >
                <Icon name={infoIcon} class="w-4 h-4 flex-shrink-0" />
                <span class="w-0 overflow-hidden group-hover:w-20 transition-all duration-300 text-xs whitespace-nowrap">
                  {helpText}
                </span>
              </label>
              <div
                tabindex="0"
                class="dropdown-content z-[1] card w-64 sm:w-80 p-2 shadow-lg bg-black/70 backdrop-blur-md text-white border border-white/20 mb-4"
                data-state="closed"
              >
                <div class="card-body p-3">
                  <p class="text-sm">{description}</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    ) : textOverlay ? (
      // No image, but with textOverlay - show gradient background with overlay text
      <div class="relative">
        <div class={`aspect-video w-full overflow-hidden bg-gradient-to-br from-base-300 to-base-100 ${headerClass}`}>
          {showTextBackground && textOverlay && (
            <div class="absolute inset-0 w-full h-full error-animation-container">
              <div class="text-9xl md:text-[12rem] font-bold text-primary opacity-20 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                {textOverlay}
              </div>
            </div>
          )}
        </div>

        <div class="absolute bottom-4 left-4 lg:bottom-6 lg:left-6">
          <div class="inline-block bg-black/60 backdrop-blur-md px-4 py-2 rounded-xl border border-white/40 shadow-lg">
            <h1 class="text-xl sm:text-2xl lg:text-4xl font-bold text-white">{title}</h1>
          </div>
        </div>

        {description && (
          <div class="absolute bottom-4 right-4 lg:bottom-6 lg:right-6">
            <div class="dropdown dropdown-top dropdown-end dropdown-hover">
              <label
                tabindex="0"
                aria-label={accessibleHelpText}
                class="group btn btn-sm px-2 bg-black/60 backdrop-blur-md hover:bg-black/80 border border-white/40 text-white shadow-lg rounded-full flex items-center gap-0 transition-all duration-300 ease-in-out"
              >
                <Icon name={infoIcon} class="w-4 h-4 flex-shrink-0" />
                <span class="w-0 overflow-hidden group-hover:w-20 transition-all duration-300 text-xs whitespace-nowrap">
                  {helpText}
                </span>
              </label>
              <div
                tabindex="0"
                class="dropdown-content z-[1] card w-64 sm:w-80 p-2 shadow-lg bg-black/70 backdrop-blur-md text-white border border-white/20 mb-4"
                data-state="closed"
              >
                <div class="card-body p-3">
                  <p class="text-sm">{description}</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    ) : (
      // No image, no textOverlay - show simple title and description at top
      <div class="pt-6 px-6">
        <h1 class="text-xl sm:text-2xl lg:text-4xl font-bold">{title}</h1>
        {description && <p class="mt-2 text-sm text-base-content/80">{description}</p>}
      </div>
    )
  }

  <!-- Content section -->
  <div class="p-4 sm:p-6">
    <slot />
  </div>


   <!-- 图片查看器 -->
   <div class="image-viewer" id="imageViewer">
       <div class="viewer-content" id="viewerContent">
           <div class="image-container">
               <div class="loading" id="loading">
                   <div class="spinner"></div>
                   加载中...
               </div>
               <img class="viewer-image" id="viewerImage" style="display: none;">
           </div>
       </div>
       <button class="close-btn" id="closeBtn">×</button>
   </div>

   <!-- 缩放控制（固定在视窗底部） -->
   <div class="zoom-controls" id="zoomControls" style="display: none;">
       <button class="zoom-btn" id="zoomOutBtn">-</button>
       <button class="zoom-btn" id="zoomInBtn">+</button>
       <button class="zoom-btn" id="resetBtn">⌂</button>
   </div>
   <div class="zoom-info" id="zoomInfo" style="display: none;">100%</div>

  <style>
    /* 查看器样式 */
    .image-viewer {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(8px); /* 添加模糊效果 */
        -webkit-backdrop-filter: blur(8px); /* 兼容 Safari */
        z-index: 10000;
        cursor: pointer;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .image-viewer.active {
        display: flex;
        opacity: 1;
    }

    .viewer-content {
        display: block;
        overflow: auto;
        width: 100%;
        height: 100%;
        padding: 20px;
        box-sizing: border-box;
    }

    .image-container {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 100%;
        min-height: 100%;
    }

    .viewer-image {
        max-width: 90%;
        max-height: 90%;
        object-fit: contain;
        border-radius: 4px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        /* transform: scale(0.8); */
        transition: transform 0.3s ease;
        cursor: grab;
        user-select: none;
    }

    .viewer-image:active {
        cursor: grabbing;
    }

    .image-viewer.active .viewer-image {
        transform: scale(1);
    }

    .close-btn {
        position: absolute;
        top: 20px;
        right: 20px;
        width: 40px;
        height: 40px;
        background-color: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 20px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s ease;
        z-index: 10001;
    }

    .close-btn:hover {
        background-color: rgba(255, 255, 255, 0.3);
    }

    .zoom-controls {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 10px;
        z-index: 10001;
    }

    .zoom-btn {
        width: 40px;
        height: 40px;
        background-color: rgba(0, 0, 0, 0.2);
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 24px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s ease;
        box-shadow: 0 2px 8px rgba(255, 255, 255, 0.2); /* 添加阴影 */
    }

    .zoom-btn:hover {
        background-color: rgba(0, 0, 0, 0.4);
    }

    .zoom-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .zoom-info {
        position: fixed;
        bottom: 70px;
        left: 50%;
        transform: translateX(-50%);
        color: white;
        font-size: 14px;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 5px 10px;
        border-radius: 4px;
        z-index: 10001;
    }

    .loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 18px;
    }

    .spinner {
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top: 3px solid white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin: 0 auto 10px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* 响应式设计 */
    @media (max-width: 768px) {
        .viewer-image {
            max-width: 95%;
            max-height: 95%;
        }
        
        .close-btn {
            top: 10px;
            right: 10px;
            width: 35px;
            height: 35px;
            font-size: 18px;
        }

        .zoom-btn {
            width: 35px;
            height: 35px;
            font-size: 16px;
        }

        .zoom-controls {
            bottom: 10px;
        }

        .zoom-info {
            bottom: 60px;
            font-size: 12px;
        }
    }

    /* 滚动条样式 */
    .viewer-content::-webkit-scrollbar {
      width: 10px;
      height: 8px;
    }

    .viewer-content::-webkit-scrollbar-track {
      background: rgba(0, 0, 0, 0.1);
    }

    .viewer-content::-webkit-scrollbar-thumb {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 4px;
    }

    .viewer-content::-webkit-scrollbar-thumb:hover {
        background: rgba(0, 0, 0, 0.5);
    }
  </style>
  <script>
    class ImageViewer {
      viewer;
      viewerContent;
      viewerImage;
      loading;
      closeBtn;
      zoomControls;
      zoomInBtn;
      zoomOutBtn;
      resetBtn;
      zoomInfo;

      isOpen;
      currentImage: HTMLImageElement | null;
      currentZoom;
      minZoom;
      maxZoom;
      zoomStep;

      isDragging;
      dragStart;
      scrollStart ;

      constructor() {
        this.viewer = document.getElementById('imageViewer');
        this.viewerContent = document.getElementById('viewerContent');
        this.viewerImage = document.getElementById('viewerImage') as HTMLImageElement;
        this.loading = document.getElementById('loading');
        this.closeBtn = document.getElementById('closeBtn');
        this.zoomControls = document.getElementById('zoomControls');
        this.zoomInBtn = document.getElementById('zoomInBtn') as HTMLButtonElement;
        this.zoomOutBtn = document.getElementById('zoomOutBtn') as HTMLButtonElement;
        this.resetBtn = document.getElementById('resetBtn');
        this.zoomInfo = document.getElementById('zoomInfo');
        
        this.isOpen = false;
        this.currentZoom = 1;
        this.currentImage = null;
        this.minZoom = 0.1;
        this.maxZoom = 5;
        this.zoomStep = 0.1;
        
        // 拖拽相关
        this.isDragging = false;
        this.dragStart = { x: 0, y: 0 };
        this.scrollStart = { x: 0, y: 0 };
        
        this.init();
      }

      init() {
        // 事件委托 - 高性能的事件监听
        document.addEventListener('click', this.handleImageClick.bind(this));
        
        // 关闭事件
        this.closeBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.close();
        });
        
        // 缩放控制
        this.zoomInBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.zoomIn();
        });
        
        this.zoomOutBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.zoomOut();
        });
        
        this.resetBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            this.resetZoom();
        });
        
        // 鼠标滚轮缩放
        // this.viewerContent.addEventListener('wheel', this.handleWheel.bind(this));
        
        // 拖拽功能
        this.viewerImage?.addEventListener('mousedown', this.startDrag.bind(this));
        document.addEventListener('mousemove', this.drag.bind(this));
        document.addEventListener('mouseup', this.endDrag.bind(this));
        
        // 触摸事件（移动端）
        this.viewerImage?.addEventListener('touchstart', this.startTouchDrag.bind(this));
        document.addEventListener('touchmove', this.touchDrag.bind(this));
        document.addEventListener('touchend', this.endDrag.bind(this));
        
        // 双击重置
        this.viewerImage?.addEventListener('dblclick', (e) => {
            e.stopPropagation();
            this.resetZoom();
        });
        
        // 点击背景关闭
        this.viewer?.addEventListener('click', (e) => {
            if (e.target != this.viewerImage) {
                this.close();
            }
        });
        
        // 键盘事件
        document.addEventListener('keydown', (e) => {
            if (!this.isOpen) return;
            
            switch(e.key) {
                case 'Escape':
                    this.close();
                    break;
                case '+':
                case '=':
                    e.preventDefault();
                    this.zoomIn();
                    break;
                case '-':
                    e.preventDefault();
                    this.zoomOut();
                    break;
                case '0':
                    e.preventDefault();
                    this.resetZoom();
                    break;
            }
        });
        
        // 防止图片拖拽
        this.viewerImage?.addEventListener('dragstart', (e) => {
            e.preventDefault();
        });
      }

      handleImageClick(e: MouseEvent) {
        // 只处理 img 标签点击 
        if ((e.target as HTMLElement).tagName === 'IMG') {
          e.preventDefault();
          this.open(e.target as HTMLImageElement);
        }
      }

      open(imgElement: HTMLImageElement) {
        if (this.isOpen) return;
        
        this.isOpen = true;
        this.currentImage = imgElement;
        this.currentZoom = 1;
        
        // 显示查看器
        if (this.viewer)
          this.viewer.style.display = 'flex';
        
        // 显示缩放控制
        if (this.zoomControls) 
          this.zoomControls.style.display = 'flex';
        if (this.zoomInfo) 
          this.zoomInfo.style.display = 'block';
        
        // 显示加载状态
        if (this.loading)
          this.loading.style.display = 'block';
        if (this.viewerImage)
          this.viewerImage.style.display = 'none';
        
        // 重置滚动位置
        if (this.viewerContent) {
          this.viewerContent.scrollTop = 0;
          this.viewerContent.scrollLeft = 0;
        }
        
        // 预加载图片
        this.loadImage(imgElement.src);
        
        // 禁用页面滚动
        document.body.style.overflow = 'hidden';
        
        // 延迟添加active类以触发动画
        requestAnimationFrame(() => {
            this.viewer?.classList.add('active');
        });
        
        this.updateZoomInfo();
        this.updateZoomButtons();
      }

      loadImage(src: string) {
        const img = new Image();
        
        img.onload = () => {
          if (this.viewerImage)
            this.viewerImage.src = src;
          if (this.loading)
            this.loading.style.display = 'none';
          if (this.viewerImage)
            this.viewerImage.style.display = 'block';

          this.resetZoom();
          if (this.viewerImage)
            // 初始化鼠标样式
            this.viewerImage.style.cursor = 'default';
        };
        
        img.onerror = () => {
          if (this.loading)
            this.loading.innerHTML = '<div style="color: #ff6b6b;">图片加载失败</div>';
        };
        
        img.src = src;
      }

      close() {
        if (!this.isOpen) return;
        
        this.isOpen = false;
        this.viewer?.classList.remove('active');
        
        // 隐藏缩放控制
        if (this.zoomControls)
          this.zoomControls.style.display = 'none';
        if (this.zoomInfo)
          this.zoomInfo.style.display = 'none';
        
        // 恢复页面滚动
        document.body.style.overflow = '';
        
        // 动画结束后隐藏
        setTimeout(() => {
            if (!this.isOpen) {
              if (this.viewer)
                this.viewer.style.display = 'none';

              this.viewerImage.src = '';
              this.currentImage = null;
              this.currentZoom = 1;
            }
        }, 300);
      }

      zoomIn() {
          if (this.currentZoom < this.maxZoom) {
              this.setZoom(this.currentZoom + this.zoomStep);
          }
      }

      zoomOut() {
          if (this.currentZoom > this.minZoom) {
              this.setZoom(this.currentZoom - this.zoomStep);
          }
      }

      resetZoom() {
          this.setZoom(1);
          // 重置滚动位置到中心
          this.centerImage();
      }

      setZoom(zoom: number) {
          // this.currentZoom = Math.max(this.minZoom, Math.min(this.maxZoom, zoom));
          // this.viewerImage.style.transform = `scale(${this.currentZoom})`;
          this.currentZoom = Math.max(this.minZoom, Math.min(this.maxZoom, zoom));

          const naturalWidth = this.viewerImage.naturalWidth;
          const naturalHeight = this.viewerImage.naturalHeight;

          this.viewerImage.style.width = `${naturalWidth * this.currentZoom}px`;
          this.viewerImage.style.height = `${naturalHeight * this.currentZoom}px`;
          
          // 更新鼠标样式
          const container = this.viewerContent;
          if (container) {
            setTimeout(() => {
                const canScrollX = container.scrollWidth > container.clientWidth;
                const canScrollY = container.scrollHeight > container.clientHeight;
                this.viewerImage.style.cursor = (canScrollX || canScrollY) ? 'grab' : 'default';
            }, 50);
          }
          
          this.updateZoomInfo();
          this.updateZoomButtons();
      }

      centerImage() {
        const container = this.viewerContent;
        const image = this.viewerImage;
        
        if (container) {
          // 计算居中位置
          const containerRect = container.getBoundingClientRect();
          const imageRect = image.getBoundingClientRect();
        
          const scrollLeft = (image.scrollWidth * this.currentZoom - containerRect.width) / 2;
          const scrollTop = (image.scrollHeight * this.currentZoom - containerRect.height) / 2;
        
          container.scrollLeft = Math.max(0, scrollLeft);
          container.scrollTop = Math.max(0, scrollTop);
        }
      }

      updateZoomInfo() {
        if (this.zoomInfo) {
          this.zoomInfo.textContent = `${Math.round(this.currentZoom * 100)}%`;

          this.zoomInfo.style.display = 'block';

          // 动画结束后隐藏
          setTimeout(() => {
            if (this.zoomInfo) 
              this.zoomInfo.style.display = 'none';
          }, 2000);
        }
      }

      updateZoomButtons() {
        if (this.zoomInBtn)
          this.zoomInBtn.disabled = this.currentZoom >= this.maxZoom;

        if (this.zoomOutBtn)
          this.zoomOutBtn.disabled = this.currentZoom <= this.minZoom;
      }

      startDrag(e: MouseEvent) {
        // 只有当图片可以滚动时才启用拖拽
        const container = this.viewerContent;
        if (container) {
          const canScrollX = container.scrollWidth > container.clientWidth;
          const canScrollY = container.scrollHeight > container.clientHeight;
        
          if (!canScrollX && !canScrollY) return;
        
          this.isDragging = true;
          this.dragStart.x = e.clientX;
          this.dragStart.y = e.clientY;
          this.scrollStart.x = container.scrollLeft;
          this.scrollStart.y = container.scrollTop;
        
          this.viewerImage.style.cursor = 'grabbing';
          e.preventDefault();
        }
      }

      startTouchDrag(e: TouchEvent) {
        if (e.touches.length !== 1) return;
        
        // 只有当图片可以滚动时才启用拖拽
        const container = this.viewerContent;
        if (container) {
          const canScrollX = container.scrollWidth > container.clientWidth;
          const canScrollY = container.scrollHeight > container.clientHeight;
        
          if (!canScrollX && !canScrollY) return;
        
          this.isDragging = true;
          this.dragStart.x = e.touches[0].clientX;
          this.dragStart.y = e.touches[0].clientY;
          this.scrollStart.x = container.scrollLeft;
          this.scrollStart.y = container.scrollTop;
        
          e.preventDefault();
        }
      }

      drag(e: MouseEvent) {
        if (!this.isDragging) return;
        
        const currentX = e.clientX;
        const currentY = e.clientY;
        
        const deltaX = this.dragStart.x - currentX;
        const deltaY = this.dragStart.y - currentY;
        
        if (this.viewerContent) {
          this.viewerContent.scrollLeft = this.scrollStart.x + deltaX;
          this.viewerContent.scrollTop = this.scrollStart.y + deltaY;
        }
        
        e.preventDefault();
      }

      touchDrag(e: TouchEvent) {
        if (!this.isDragging || e.touches.length !== 1) return;
        
        const currentX = e.touches[0].clientX;
        const currentY = e.touches[0].clientY;
        
        const deltaX = this.dragStart.x - currentX;
        const deltaY = this.dragStart.y - currentY;
        
        if (this.viewerContent) {
          this.viewerContent.scrollLeft = this.scrollStart.x + deltaX;
          this.viewerContent.scrollTop = this.scrollStart.y + deltaY;
        }
        
        e.preventDefault();
      }

      endDrag() {
        if (this.isDragging) {
            this.isDragging = false;
            this.viewerImage.style.cursor = 'grab';
        }
      }
    }

    // 页面加载完成后初始化
    document.addEventListener('DOMContentLoaded', () => {
        new ImageViewer();
    });
  </script>
</Card>

<script>
  document.addEventListener("astro:page-load", () => {
    // Get all info buttons and dropdown contents
    const infoButtons = document.querySelectorAll(".dropdown label");
    const dropdownContents = document.querySelectorAll(".dropdown-content");

    // Add click event listeners
    infoButtons.forEach((button, index) => {
      button.addEventListener("click", () => {
        const content = dropdownContents[index];
        const currentState = content.getAttribute("data-state");

        // Toggle state
        if (currentState === "closed") {
          content.setAttribute("data-state", "open");
          // Add animation classes when opening
          content.classList.add("scale-100", "opacity-100");
          content.classList.remove("scale-90", "opacity-0");
        } else {
          content.setAttribute("data-state", "closed");
          // Remove animation classes when closing
          content.classList.add("scale-90", "opacity-0");
          content.classList.remove("scale-100", "opacity-100");
        }
      });
    });
  });
</script>

<div class="image-modal" id="imageModal" aria-hidden="true">
  <span class="close-modal" id="closeModal">&times;</span>
  <img class="modal-content" id="modalImage">
  <div class="caption" id="caption"></div>
</div>

