import{g as e,F as n,_ as l}from"./astro/server_Cr3L-o0H.mjs";const r={title:"React 文档笔记",description:"前段时间阅读 React 官方文档时, 顺手记录了一些个人认为比较重要的知识点作为笔记",pubDate:"04 3 2025",image:"/image/image2.jpg",categories:["tech"],tags:["React","笔记"],totalCharCount:3074,readingTime:13};function c(){return[{depth:2,slug:"react-文档笔记",text:"React 文档笔记"}]}function t(l){const r={a:"a",button:"button",code:"code",div:"div",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",path:"path",pre:"pre",rect:"rect",span:"span",strong:"strong",svg:"svg",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...l.components};return e(n,{children:[e(r.h2,{id:"react-文档笔记",children:"React 文档笔记"}),"\n",e(r.p,{children:["前段时间阅读 React 官方文档时, 顺手记录了一些个人认为比较重要的知识点作为笔记, 都是比较基础的知识",e("br",{}),"\r\n(如果发现有误, 请联系我)"]}),"\n",e(r.ol,{children:["\n",e(r.li,{children:["\n",e(r.p,{children:["style 写法: ",e(r.code,{children:"{{  }}"})]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"tailwind 与 组件库容易冲突, 支持 tailwind 的组件库: heroui(最好使用 next.js 在搭建项目时直接一起搭建)"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"\\export default 默认导出, export 具名导出, 有很多区别, 可以自己思考一下"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"建议将 props 解构使用并提供默认值(默认值只会对 undefined 生效)"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"大量组件渲染, 涉及变动时建议添加 key 进行绑定"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"列表渲染组件 map 返回 tsx(同样记得加 key) 或者 fliter 返回 过滤后数组 (=> 直接少量数据返回 或者 => {return …})"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:[e(r.code,{children:"<>"})," 及 ",e(r.code,{children:"</>"})," 不可添加 key, 此时替换为 ",e(r.code,{children:"<Fragment>"})," 或 ",e(r.code,{children:"</ Fragment>"})]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"组件不应当更改任何值, 只负责进行渲染"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["命名惯例: 按照惯例，通常将事件处理程序命名为 ",e(r.code,{children:"handle"}),"，后接事件名"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["某些浏览器事件具有与事件相关联的默认行为, 例:点击 ",e(r.code,{children:"<form>"})," 表单内部的按钮会触发表单提交事件，默认情况下将重新加载整个页面, 应当使用 e.preventDefault() 进行阻止"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["使用 ",e(r.code,{children:"e.stopPropagation()"})," 阻止冒泡"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:[e(r.code,{children:"{ }"})," 内部应当传递事件而非函数调用, 实际上, 传递函数调用的话将在每次渲染时被运行"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:[e(r.a,{href:"https://zh-hans.react.dev/reference/react/useState",rel:"nofollow",children:[e(r.code,{children:"useState"}),e(r.span,{children:"↗"})]})," 最终提供功能: ",e(r.strong,{children:"State 变量"})," 用于保存渲染间的数据, ",e(r.strong,{children:"State setter 函数"})," 更新变量并触发 React 再次渲染组件"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"hooks 依托于一个稳定的调用顺序"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"react 渲染机制: 初次渲染根组件, 之后渲染 被更新的组件 及 其子组件( 递归过程 ), 在开发环境中，React 会在组件首次挂载后立即重新挂载一次, 以便于发现各种问题"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["state setter 处理机制: react 将会收集 该事件处理函数 中的所有更新(需要重新渲染组件的操作), 并在该函数执行完毕后 ",e(r.strong,{children:"一次性"})," 合并更新并触发重新渲染, 在 react 18 前, 异步函数中的所有更新将被 ",e(r.strong,{children:"立刻执行"})," ,但在 react 18 后, 异步函数中的更新同样将被收集并合并更新"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"使用函数式更新可以在末尾集中运行时, 每次运行后及时更新 state 的值(但是还是可以被后面的赋值给覆盖)"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.div,{class:"not-prose frosti-code",children:[e(r.div,{class:"frosti-code-toolbar",children:[e(r.span,{class:"frosti-code-toolbar-language",children:"JSX"}),e(r.button,{class:"btn-copy","aria-label":"Copy code",type:"button",children:[e(r.span,{class:"frosti-code-toolbar-copy-icon","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"copy-icon",children:[e(r.rect,{x:"9",y:"9",width:"13",height:"13",rx:"2",ry:"2"}),e(r.path,{d:"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"})]})}),e(r.span,{class:"frosti-code-toolbar-copy-success hidden","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"success-icon",children:e(r.path,{d:"M20 6L9 17l-5-5"})})})]})]}),e(r.pre,{class:"frosti-code-content",style:{backgroundColor:"#24292e",color:"#e1e4e8",overflowX:"auto"},tabindex:"0","data-language":"jsx",children:e(r.code,{class:"grid [&>.line]:px-4",style:{counterReset:"line"},children:e(r.code,{children:[e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"import"}),e(r.span,{style:{color:"#E1E4E8"},children:" { useState } "}),e(r.span,{style:{color:"#F97583"},children:"from"}),e(r.span,{style:{color:"#9ECBFF"},children:" 'react'"}),e(r.span,{style:{color:"#E1E4E8"},children:";"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"}}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"export"}),e(r.span,{style:{color:"#F97583"},children:" default"}),e(r.span,{style:{color:"#F97583"},children:" function"}),e(r.span,{style:{color:"#B392F0"},children:" Counter"}),e(r.span,{style:{color:"#E1E4E8"},children:"() {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"  const"}),e(r.span,{style:{color:"#E1E4E8"},children:" ["}),e(r.span,{style:{color:"#79B8FF"},children:"number"}),e(r.span,{style:{color:"#E1E4E8"},children:", "}),e(r.span,{style:{color:"#79B8FF"},children:"setNumber"}),e(r.span,{style:{color:"#E1E4E8"},children:"] "}),e(r.span,{style:{color:"#F97583"},children:"="}),e(r.span,{style:{color:"#B392F0"},children:" useState"}),e(r.span,{style:{color:"#E1E4E8"},children:"("}),e(r.span,{style:{color:"#79B8FF"},children:"0"}),e(r.span,{style:{color:"#E1E4E8"},children:");"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"}}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"  return"}),e(r.span,{style:{color:"#E1E4E8"},children:" ("})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"    <>"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"      \\<"}),e(r.span,{style:{color:"#85E89D"},children:"h1"}),e(r.span,{style:{color:"#E1E4E8"},children:">{number}\\</"}),e(r.span,{style:{color:"#85E89D"},children:"h1"}),e(r.span,{style:{color:"#E1E4E8"},children:">"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"      <"}),e(r.span,{style:{color:"#85E89D"},children:"button"}),e(r.span,{style:{color:"#B392F0"},children:" onClick"}),e(r.span,{style:{color:"#F97583"},children:"="}),e(r.span,{style:{color:"#E1E4E8"},children:"{() "}),e(r.span,{style:{color:"#F97583"},children:"=>"}),e(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#B392F0"},children:"        setNumber"}),e(r.span,{style:{color:"#E1E4E8"},children:"(number "}),e(r.span,{style:{color:"#F97583"},children:"+"}),e(r.span,{style:{color:"#79B8FF"},children:" 5"}),e(r.span,{style:{color:"#E1E4E8"},children:");"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#B392F0"},children:"        setNumber"}),e(r.span,{style:{color:"#E1E4E8"},children:"("}),e(r.span,{style:{color:"#FFAB70"},children:"n"}),e(r.span,{style:{color:"#F97583"},children:" =>"}),e(r.span,{style:{color:"#E1E4E8"},children:" n "}),e(r.span,{style:{color:"#F97583"},children:"+"}),e(r.span,{style:{color:"#79B8FF"},children:" 1"}),e(r.span,{style:{color:"#E1E4E8"},children:");"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#B392F0"},children:"        setNumber"}),e(r.span,{style:{color:"#E1E4E8"},children:"("}),e(r.span,{style:{color:"#79B8FF"},children:"42"}),e(r.span,{style:{color:"#E1E4E8"},children:");"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"      }}>增加数字\\</"}),e(r.span,{style:{color:"#85E89D"},children:"button"}),e(r.span,{style:{color:"#E1E4E8"},children:">"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"    </>"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"  )"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"}"})})]})})})]}),"\n",e(r.p,{children:"结果:"}),"\n"]}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",e(r.table,{children:[e(r.thead,{children:e(r.tr,{children:[e(r.th,{style:{textAlign:"left"},children:"更新步骤"}),e(r.th,{style:{textAlign:"left"},children:"队列中的值变化"}),e(r.th,{style:{textAlign:"left"},children:"说明"})]})}),e(r.tbody,{children:[e(r.tr,{children:[e(r.td,{style:{textAlign:"left"},children:"初始值"}),e(r.td,{style:{textAlign:"left"},children:e(r.code,{children:"0"})}),e(r.td,{style:{textAlign:"left"},children:"渲染时的初始状态"})]}),e(r.tr,{children:[e(r.td,{style:{textAlign:"left"},children:e(r.code,{children:"setNumber(0 + 5)"})}),e(r.td,{style:{textAlign:"left"},children:["计划更新为 ",e(r.code,{children:"5"})]}),e(r.td,{style:{textAlign:"left"},children:["基于当前值 ",e(r.code,{children:"0"})]})]}),e(r.tr,{children:[e(r.td,{style:{textAlign:"left"},children:e(r.code,{children:"setNumber(n => n + 1)"})}),e(r.td,{style:{textAlign:"left"},children:["计划更新为 ",e(r.code,{children:"6"})]}),e(r.td,{style:{textAlign:"left"},children:["基于前一次队列值 ",e(r.code,{children:"5"})]})]}),e(r.tr,{children:[e(r.td,{style:{textAlign:"left"},children:e(r.code,{children:"setNumber(42)"})}),e(r.td,{style:{textAlign:"left"},children:["覆盖为 ",e(r.code,{children:"42"})]}),e(r.td,{style:{textAlign:"left"},children:"直接赋值，忽略前序计算结果"})]}),e(r.tr,{children:[e(r.td,{style:{textAlign:"left"},children:e(r.strong,{children:"最终结果"})}),e(r.td,{style:{textAlign:"left"},children:e(r.strong,{children:e(r.code,{children:"42"})})}),e(r.td,{style:{textAlign:"left"},children:"最后一次更新覆盖所有前序值"})]})]})]}),"\n",e(r.ol,{start:"19",children:["\n",e(r.li,{children:["\n",e(r.p,{children:["使用展开语法 ",e(r.code,{children:"[...a, b]"})," 或 ",e(r.code,{children:"{ ...a, b:'b'}"})," 可以进行数组或对象的快速合并, 在对象中使用 [ ] 可以做到动态命名"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["使用 ",e(r.code,{children:"useImmer"})," 代替 ",e(r.code,{children:"useState"})," 可以更快和更直接地更新对象"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"react 中推荐与不推荐使用的数组方法"}),"\n"]}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",e(r.table,{children:[e(r.thead,{children:e(r.tr,{children:[e(r.th,{}),e(r.th,{children:"避免使用 (会改变原始数组)"}),e(r.th,{children:"推荐使用 (会返回一个新数组） )"})]})}),e(r.tbody,{children:[e(r.tr,{children:[e(r.td,{children:"添加元素"}),e(r.td,{children:[e(r.code,{children:"push"}),"，",e(r.code,{children:"unshift"})]}),e(r.td,{children:[e(r.code,{children:"concat"}),"，",e(r.code,{children:"[...arr]"})," 展开语法（",e(r.a,{href:"https://zh-hans.react.dev/learn/updating-arrays-in-state#adding-to-an-array",rel:"nofollow",children:["例子",e(r.span,{children:"↗"})]}),"）"]})]}),e(r.tr,{children:[e(r.td,{children:"删除元素"}),e(r.td,{children:[e(r.code,{children:"pop"}),"，",e(r.code,{children:"shift"}),"，",e(r.code,{children:"splice"})]}),e(r.td,{children:[e(r.code,{children:"filter"}),"，",e(r.code,{children:"slice"}),"（",e(r.a,{href:"https://zh-hans.react.dev/learn/updating-arrays-in-state#removing-from-an-array",rel:"nofollow",children:["例子",e(r.span,{children:"↗"})]}),"）"]})]}),e(r.tr,{children:[e(r.td,{children:"替换元素"}),e(r.td,{children:[e(r.code,{children:"splice"}),"，",e(r.code,{children:"arr[i] = ..."})," 赋值"]}),e(r.td,{children:[e(r.code,{children:"map"}),"（",e(r.a,{href:"https://zh-hans.react.dev/learn/updating-arrays-in-state#replacing-items-in-an-array",rel:"nofollow",children:["例子",e(r.span,{children:"↗"})]}),"）"]})]}),e(r.tr,{children:[e(r.td,{children:"排序"}),e(r.td,{children:[e(r.code,{children:"reverse"}),"，",e(r.code,{children:"sort"})]}),e(r.td,{children:["先将数组复制一份（",e(r.a,{href:"https://zh-hans.react.dev/learn/updating-arrays-in-state#making-other-changes-to-an-array",rel:"nofollow",children:["例子",e(r.span,{children:"↗"})]}),"）"]})]})]})]}),"\n",e(r.ol,{start:"22",children:["\n",e(r.li,{children:["\n",e(r.p,{children:["对象并不是 ",e(r.em,{children:"真的"})," 位于数组“内部”, 可能他们在代码中看起来像是在数组“内部”. 同样 对象并不是真的嵌套, 只是看起来像嵌套"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["state 设置原则: ",e(r.strong,{children:"使 state 易于更新而不引入错误"})," , 例: 少使用 Boolean 类型的 state, 而将其直接命名为各种状态"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["初始 state 命名惯例: 以 ",e(r.code,{children:"initial"})," 或 ",e(r.code,{children:"default"})," 开头"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"state 不建议多层嵌套, 建议扁平化处理, 使用 递归 对子元素进行渲染和使用 递归 对子元素进行处理"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"可以在组件中间添加 JSX 等内容, 将作为 children 特殊属性传给组件"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"在 react 中, **UI 树中 **相同位置的相同组件会被视为同一个组件, state 会被保留下来, 而在一般情况下, 组件被销毁后, state 会被重置"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"使用 key 可以很方便地独立组件并重置 state, 想要在这种情况下保留 state 的话, 请使用状态提升"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"复杂情况下 useState 的代替: useReducer, reducer 可以整合状态逻辑, 增加代码的可理解性和易维护性"}),"\n",e(r.p,{children:e(r.code,{children:"const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);"})}),"\n",e(r.p,{children:"给予初始值: initailTasks, 集中处理函数: tasksReducer, 初始值及后续更改后的值将被封装在 tasks 中, 使用 dispatch 将触发 tasksReducer 函数"}),"\n"]}),"\n"]}),"\n",e(r.div,{class:"not-prose frosti-code",children:[e(r.div,{class:"frosti-code-toolbar",children:[e(r.span,{class:"frosti-code-toolbar-language",children:"JSX"}),e(r.button,{class:"btn-copy","aria-label":"Copy code",type:"button",children:[e(r.span,{class:"frosti-code-toolbar-copy-icon","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"copy-icon",children:[e(r.rect,{x:"9",y:"9",width:"13",height:"13",rx:"2",ry:"2"}),e(r.path,{d:"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"})]})}),e(r.span,{class:"frosti-code-toolbar-copy-success hidden","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"success-icon",children:e(r.path,{d:"M20 6L9 17l-5-5"})})})]})]}),e(r.pre,{class:"frosti-code-content",style:{backgroundColor:"#24292e",color:"#e1e4e8",overflowX:"auto"},tabindex:"0","data-language":"jsx",children:e(r.code,{class:"grid [&>.line]:px-4",style:{counterReset:"line"},children:e(r.code,{children:[e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"function"}),e(r.span,{style:{color:"#B392F0"},children:" tasksReducer"}),e(r.span,{style:{color:"#E1E4E8"},children:"("}),e(r.span,{style:{color:"#FFAB70"},children:"tasks"}),e(r.span,{style:{color:"#E1E4E8"},children:", "}),e(r.span,{style:{color:"#FFAB70"},children:"action"}),e(r.span,{style:{color:"#E1E4E8"},children:") {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"          switch"}),e(r.span,{style:{color:"#E1E4E8"},children:" (action.type) {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"            case"}),e(r.span,{style:{color:"#9ECBFF"},children:" 'added'"}),e(r.span,{style:{color:"#E1E4E8"},children:": {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"              return"}),e(r.span,{style:{color:"#F97583"},children:" ..."}),e(r.span,{style:{color:"#E1E4E8"},children:";"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"            }"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"            case"}),e(r.span,{style:{color:"#9ECBFF"},children:" 'changed'"}),e(r.span,{style:{color:"#E1E4E8"},children:": {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"              return"}),e(r.span,{style:{color:"#F97583"},children:" ..."}),e(r.span,{style:{color:"#E1E4E8"},children:";"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"            case"}),e(r.span,{style:{color:"#9ECBFF"},children:" 'deleted'"}),e(r.span,{style:{color:"#E1E4E8"},children:": {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"              return "}),e(r.span,{style:{color:"#F97583"},children:"..."}),e(r.span,{style:{color:"#E1E4E8"},children:";"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"            }"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"            default"}),e(r.span,{style:{color:"#E1E4E8"},children:": {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"              throw "}),e(r.span,{style:{color:"#B392F0"},children:"Error"}),e(r.span,{style:{color:"#E1E4E8"},children:"("}),e(r.span,{style:{color:"#9ECBFF"},children:"'未知 action: '"}),e(r.span,{style:{color:"#E1E4E8"},children:" + action.type);"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"            }"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"          }"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"        }"})})]})})})]}),"\n",e(r.p,{children:"tasksReducer 函数中集中处理 tasks 变化, 通过 switch 来对应 action 中传递的各种情况并 return 处理后的 tasks(使用 action 中的参数对 tasks 进行修改), 还可以使用 default 进行意外的错误处理"}),"\n",e(r.p,{children:["在对应情况的函数中, 使用 ",e(r.code,{children:"dispatch(action)"})," 分发 action 触发 tasksReducer 函数, 便会根据 dispatch 中 type 的值使用对应的 switch 进行 tasks 的对应处理"]}),"\n",e(r.ol,{start:"30",children:["\n",e(r.li,{children:["\n",e(r.p,{children:"使用 context 代替 props 层层透传"}),"\n",e(r.p,{children:"首先, 创建一个 context (一般在新的文件中),"}),"\n",e(r.p,{children:["例: ",e(r.code,{children:"export const LevelContext = createContext(1);"})]}),"\n",e(r.p,{children:["其中 ",e(r.code,{children:"creatContext()"})," 中的为初始值, LevelContext 为创建后的 context 名"]}),"\n",e(r.p,{children:"然后, 在需要应用的组件(注意: 指最终接收和应用 context 的子组件)中导入 LevelContext ,"}),"\n",e(r.p,{children:"使用 useContext 将它赋值给一个变量以便投入使用,"}),"\n",e(r.p,{children:["例: ",e(r.code,{children:"const level = useContext(LevelContext);"})]}),"\n",e(r.p,{children:"此后, 可以在该组件中使用 level 作为正常变量进行对应的操作"}),"\n",e(r.p,{children:"最后, 在需要进行透传的组件中(上文子组件的父组件)中使用 level 作为 props, 并在定义组件时, 引入 LevelContext 并用其包裹子组件"}),"\n"]}),"\n"]}),"\n",e(r.p,{children:"例:"}),"\n",e(r.div,{class:"not-prose frosti-code",children:[e(r.div,{class:"frosti-code-toolbar",children:[e(r.span,{class:"frosti-code-toolbar-language",children:"JSX"}),e(r.button,{class:"btn-copy","aria-label":"Copy code",type:"button",children:[e(r.span,{class:"frosti-code-toolbar-copy-icon","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"copy-icon",children:[e(r.rect,{x:"9",y:"9",width:"13",height:"13",rx:"2",ry:"2"}),e(r.path,{d:"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"})]})}),e(r.span,{class:"frosti-code-toolbar-copy-success hidden","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"success-icon",children:e(r.path,{d:"M20 6L9 17l-5-5"})})})]})]}),e(r.pre,{class:"frosti-code-content",style:{backgroundColor:"#24292e",color:"#e1e4e8",overflowX:"auto"},tabindex:"0","data-language":"jsx",children:e(r.code,{class:"grid [&>.line]:px-4",style:{counterReset:"line"},children:e(r.code,{children:[e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"import"}),e(r.span,{style:{color:"#E1E4E8"},children:" { LevelContext } "}),e(r.span,{style:{color:"#F97583"},children:"from"}),e(r.span,{style:{color:"#9ECBFF"},children:" './LevelContext.js'"}),e(r.span,{style:{color:"#E1E4E8"},children:";"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"}}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"export"}),e(r.span,{style:{color:"#F97583"},children:" default"}),e(r.span,{style:{color:"#F97583"},children:" function"}),e(r.span,{style:{color:"#B392F0"},children:" Section"}),e(r.span,{style:{color:"#E1E4E8"},children:"({ "}),e(r.span,{style:{color:"#FFAB70"},children:"level"}),e(r.span,{style:{color:"#E1E4E8"},children:", "}),e(r.span,{style:{color:"#FFAB70"},children:"children"}),e(r.span,{style:{color:"#E1E4E8"},children:" }) {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"  return"}),e(r.span,{style:{color:"#E1E4E8"},children:" ("})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"    <"}),e(r.span,{style:{color:"#85E89D"},children:"section"}),e(r.span,{style:{color:"#B392F0"},children:" className"}),e(r.span,{style:{color:"#F97583"},children:"="}),e(r.span,{style:{color:"#9ECBFF"},children:'"section"'}),e(r.span,{style:{color:"#E1E4E8"},children:">"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"     <"}),e(r.span,{style:{color:"#79B8FF"},children:"LevelContext"}),e(r.span,{style:{color:"#B392F0"},children:" value"}),e(r.span,{style:{color:"#F97583"},children:"="}),e(r.span,{style:{color:"#E1E4E8"},children:"{level}> //传给子组件的值"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"        {children}"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"      </"}),e(r.span,{style:{color:"#79B8FF"},children:"LevelContext"}),e(r.span,{style:{color:"#E1E4E8"},children:">"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#E1E4E8"},children:"    </"}),e(r.span,{style:{color:"#85E89D"},children:"section"}),e(r.span,{style:{color:"#E1E4E8"},children:">"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"  );"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"}"})})]})})})]}),"\n",e(r.p,{children:"此后, context 便会在组件间进行透传(可以传到上文的两种组件中), 并会穿过中间层级的组件"}),"\n",e(r.ol,{start:"31",children:["\n",e(r.li,{children:["\n",e(r.p,{children:["ts 中, 可以使用 ",e(r.code,{children:":React.FC<{}>"})," 快捷地为传入的 props 中的各项数据进行类型声明"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:[e(r.code,{children:"Object.keys(obj)"})," 方法可以快速地得到 obj 的键名组成的数组"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"context 及 reducer 函数在多数时候可以使用 store 库进行代替, store 库中的状态更改时也会触发重新渲染"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"每次组件触发重新渲染时, 常规变量的值都会被重置, 想要保存变量的值, 应当使用 useState 或者 useRef"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"函数: useRef"}),"\n",e(r.p,{children:["使用 ",e(r.code,{children:"const ref = useRef(0);"})," 创建一个 ref, 括号中为提供的初始值"]}),"\n",e(r.p,{children:["然而, ref 返回的是一个对象 ",e(r.code,{children:"{ current: 0  // 你向 useRef 传入的值 }"})," 在组件中应当使用 ref.current 访问储存的值"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"ref 与 state 异同"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",e(r.table,{children:[e(r.thead,{children:e(r.tr,{children:[e(r.th,{children:"ref"}),e(r.th,{children:"state"})]})}),e(r.tbody,{children:[e(r.tr,{children:[e(r.td,{children:[e(r.code,{children:"useRef(initialValue)"}),"返回 ",e(r.code,{children:"{ current: initialValue }"})]}),e(r.td,{children:[e(r.code,{children:"useState(initialValue)"})," 返回 state 变量的当前值和一个 state 设置函数 ( ",e(r.code,{children:"[value, setValue]"}),")"]})]}),e(r.tr,{children:[e(r.td,{children:"更改时不会触发重新渲染"}),e(r.td,{children:"更改时触发重新渲染。"})]}),e(r.tr,{children:[e(r.td,{children:["可变 —— 你可以在渲染过程之外修改和更新 ",e(r.code,{children:"current"})," 的值。"]}),e(r.td,{children:"“不可变” —— 你必须使用 state 设置函数来修改 state 变量，从而排队重新渲染。"})]}),e(r.tr,{children:[e(r.td,{children:["你不应在渲染期间读取（或写入） ",e(r.code,{children:"current"})," 值。"]}),e(r.td,{children:["你可以随时读取 state。但是，每次渲染都有自己不变的 state ",e(r.a,{href:"https://zh-hans.react.dev/learn/state-as-a-snapshot",rel:"nofollow",children:["快照",e(r.span,{children:"↗"})]}),"。"]})]})]})]}),"\n",e(r.p,{children:"ref 可以被便利地更改: 不需要使用 set 函数"}),"\n",e(r.p,{children:["ref ",e(r.strong,{children:"不是快照"}),", state 则是, 例如在异步操作中, state 被提交后则固定, 而 ref 在操作执行前仍可以更改并将变化反应到结果上, 所以 ref 也常常被用于各种异步操作中"]}),"\n",e(r.p,{children:["ref ",e(r.strong,{children:"不会"}),"触发浏览器的重新渲染, 所以它不应当被使用在与 DOM 相关的变化中, 相反, 在一些频繁触发的操作中, 使用 ref 可以极大地优化性能: 例如: 制作秒表, 制作防抖函数中"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["使用 ",e(r.code,{children:"element.scrollIntoView()"})," 方法将元素滚动到视野中, 可传入参数对象:"]}),"\n"]}),"\n"]}),"\n",e(r.div,{class:"not-prose frosti-code",children:[e(r.div,{class:"frosti-code-toolbar",children:[e(r.span,{class:"frosti-code-toolbar-language",children:"PLAINTEXT"}),e(r.button,{class:"btn-copy","aria-label":"Copy code",type:"button",children:[e(r.span,{class:"frosti-code-toolbar-copy-icon","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"copy-icon",children:[e(r.rect,{x:"9",y:"9",width:"13",height:"13",rx:"2",ry:"2"}),e(r.path,{d:"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"})]})}),e(r.span,{class:"frosti-code-toolbar-copy-success hidden","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"success-icon",children:e(r.path,{d:"M20 6L9 17l-5-5"})})})]})]}),e(r.pre,{class:"frosti-code-content",style:{backgroundColor:"#24292e",color:"#e1e4e8",overflowX:"auto"},tabindex:"0","data-language":"plaintext",children:e(r.code,{class:"grid [&>.line]:px-4",style:{counterReset:"line"},children:e(r.code,{children:[e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{children:"        {"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{children:"          behavior: '...',"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{children:"          block: '...',"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{children:"          inline: '...'"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{children:"        }"})})]})})})]}),"\n",e(r.ol,{start:"38",children:["\n",e(r.li,{children:["\n",e(r.p,{children:["ref 在很多时候被用来控制 DOM , 处理一些 react 无法处理的 DOM 事件, 常见示例包括管理焦点、滚动位置或调用 React 未暴露的浏览器 API, 但是，如果尝试手动 ",e(r.strong,{children:"修改"})," DOM，则可能会与 React 所做的更改发生冲突, ",e(r.strong,{children:"尽量不要这么做"})]}),"\n",e(r.p,{children:["要实现功能, 首先: ",e(r.code,{children:"const myRef = useRef(null);"})," 将 ref 设置为null"]}),"\n",e(r.p,{children:["之后, 将 DOM 绑定在 JSX 上: ",e(r.code,{children:"<div ref={myRef}>"})]}),"\n",e(r.p,{children:["在 DOM 节点被创建时, React 会把对该节点的引用放入 ",e(r.code,{children:"myRef.current"})," , 然后便可以访问这个 DOM 元素"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["可以使用 ref 回调更精确地控制 ref: 即",e(r.strong,{children:["将函数传递给 ",e(r.code,{children:"ref"})," 属性"]}),"以控制 ref 在不同情况下的各种状态"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"如同其他 props , ref 也可以被传给子元素, 便可以透过父元素控制子元素状态"}),"\n",e(r.p,{children:["可以使用 ",e(r.code,{children:"useImperativeHandle"})," 控制父元素可以访问的子元素特性的范围"]}),"\n",e(r.p,{children:["配置: ",e(r.code,{children:"useImperativeHandle(ref, createHandle, [deps])"})]}),"\n",e(r.ul,{children:["\n",e(r.li,{children:[e(r.code,{children:"ref"}),"：传递给组件的 ",e(r.code,{children:"ref"}),"。"]}),"\n",e(r.li,{children:[e(r.code,{children:"createHandle"}),"：返回一个对象，该对象就是暴露给父组件的实例值。"]}),"\n",e(r.li,{children:[e(r.code,{children:"[deps]"}),"：可选参数，是一个依赖数组，当依赖项发生变化时，",e(r.code,{children:"createHandle"})," 会重新执行。"]}),"\n"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"使用 flushSync 可以使 set state 函数不等待更新队列立刻更新 DOM"}),"\n",e(r.p,{children:["配置: ",e(r.code,{children:"flushSync(callback)"})]}),"\n",e(r.p,{children:[e(r.code,{children:"callback"}),"：一个回调函数，在该函数中进行状态更新操作。"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:[e(r.strong,{children:"Effect"})," 是 React 范式中的一种脱围机制, 它",e(r.strong,{children:"允许你指定由渲染自身，而不是特定事件引起的副作用"}),"。"]}),"\n",e(r.p,{children:["Effect 在 ",e(r.a,{href:"https://zh-hans.react.dev/learn/render-and-commit",rel:"nofollow",children:["提交",e(r.span,{children:"↗"})]})," 结束后、页面更新后运行: 此时是将 React 组件与外部系统（如网络或第三方库）同步的最佳时机。"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"Effect 的使用:"}),"\n",e(r.p,{children:["导入 Effect 后 ",e(r.strong,{children:e(r.code,{children:"( import { useEffect } from 'react')"})})," , 在组件顶部进行调用"]}),"\n",e(r.div,{class:"not-prose frosti-code",children:[e(r.div,{class:"frosti-code-toolbar",children:[e(r.span,{class:"frosti-code-toolbar-language",children:"JSX"}),e(r.button,{class:"btn-copy","aria-label":"Copy code",type:"button",children:[e(r.span,{class:"frosti-code-toolbar-copy-icon","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"copy-icon",children:[e(r.rect,{x:"9",y:"9",width:"13",height:"13",rx:"2",ry:"2"}),e(r.path,{d:"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"})]})}),e(r.span,{class:"frosti-code-toolbar-copy-success hidden","aria-hidden":"true",children:e(r.svg,{xmlns:"http://www.w3.org/2000/svg",width:"18",height:"18",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"success-icon",children:e(r.path,{d:"M20 6L9 17l-5-5"})})})]})]}),e(r.pre,{class:"frosti-code-content",style:{backgroundColor:"#24292e",color:"#e1e4e8",overflowX:"auto"},tabindex:"0","data-language":"jsx",children:e(r.code,{class:"grid [&>.line]:px-4",style:{counterReset:"line"},children:e(r.code,{children:[e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"function"}),e(r.span,{style:{color:"#B392F0"},children:" MyComponent"}),e(r.span,{style:{color:"#E1E4E8"},children:"() {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#B392F0"},children:" useEffect"}),e(r.span,{style:{color:"#E1E4E8"},children:"(() "}),e(r.span,{style:{color:"#F97583"},children:"=>"}),e(r.span,{style:{color:"#E1E4E8"},children:" {"})]}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#6A737D"},children:"    // 每次渲染后都会执行此处的代码"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"}}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:e(r.span,{style:{color:"#E1E4E8"},children:"  });"})}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"}}),"\n",e(r.span,{class:"line before:content-[counter(line)]",style:{counterIncrement:"line"},children:[e(r.span,{style:{color:"#F97583"},children:"  return"}),e(r.span,{style:{color:"#E1E4E8"},children:" <"}),e(r.span,{style:{color:"#85E89D"},children:"div"}),e(r.span,{style:{color:"#E1E4E8"},children:" />;"})]})]})})})]}),"\n",e(r.p,{children:["简单来讲, ",e(r.strong,{children:[e(r.code,{children:"useEffect"})," 会“延迟”一段代码的运行，直到渲染结果反映在页面上"]})]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"useEffect 还可以接收第二个参数: 依赖数组,"}),"\n",e(r.p,{children:"当无依赖数组时: 在每次渲染后调用"}),"\n",e(r.p,{children:"当存在依赖数组时, 需要将 Effect 中使用的参数放入其中, 否则会报错"}),"\n",e(r.ul,{children:["\n",e(r.li,{children:["\n",e(r.p,{children:"当依赖数组为空时: 在组件挂载后调用(注意)"}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:["使用正常的依赖数组时, 依赖数组中的 ",e(r.strong,{children:"任意元素变化"})," 将调用 Effect (注意: Effect 为浅比较)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",e(r.li,{children:["\n",e(r.p,{children:"按需添加清理（cleanup）函数: 因为在每次渲染后都会调用 Effect , 所以 Effect 产生的副作用应当被及时进行清理"}),"\n",e(r.p,{children:["可以在 Effect 中返回一个 ",e(r.strong,{children:"清理（cleanup）函数"}),", React 会在每次 Effect 重新运行之前调用清理函数，并在组件卸载（被移除）时最后一次调用清理函数"]}),"\n"]}),"\n"]})]})}const o="src/content/blog/React-text-note.mdx",i="D:/我滴作业/blog/Frosti/src/content/blog/React-text-note.mdx",s=(l={})=>function(n={}){const{wrapper:l}=n.components||{};return l?e(l,{...n,children:e(t,{...n})}):t(n)}({...l,components:{Fragment:n,...l.components}});s[Symbol.for("mdx-component")]=!0,s[Symbol.for("astro.needsHeadRendering")]=!Boolean(r.layout),s.moduleId="D:/我滴作业/blog/Frosti/src/content/blog/React-text-note.mdx",l(s,"astro:jsx");export{s as Content,s as default,i as file,r as frontmatter,c as getHeadings,o as url};
