const r=[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.5.4","content-config-digest","3dd385d782ea2038","astro-config-digest",'{"root":{},"srcDir":{},"publicDir":{},"outDir":{},"cacheDir":{},"site":"https://frosti.saroprock.com","compressHTML":true,"base":"/","trailingSlash":"ignore","output":"server","scopedStyleStrategy":"attribute","build":{"format":"directory","client":{},"server":{},"assets":"_astro","serverEntry":"entry.mjs","redirects":false,"inlineStylesheets":"auto","concurrency":1},"server":{"open":false,"host":false,"port":4321,"streaming":true,"allowedHosts":[]},"redirects":{},"image":{"endpoint":{"route":"/_image"},"service":{"entrypoint":"astro/assets/services/sharp","config":{}},"domains":[],"remotePatterns":[]},"devToolbar":{"enabled":true},"markdown":{"syntaxHighlight":{"type":"shiki","excludeLangs":["math"]},"shikiConfig":{"langs":[],"langAlias":{},"theme":"github-dark","themes":{},"wrap":false,"transformers":[{}]},"remarkPlugins":[null,null],"rehypePlugins":[null,[null,{"content":{"type":"text","value":"↗"}}]],"remarkRehype":{},"gfm":true,"smartypants":true},"security":{"checkOrigin":true},"env":{"schema":{},"validateSecrets":false},"experimental":{"clientPrerender":false,"contentIntellisense":false,"responsiveImages":false,"serializeConfig":false,"headingIdCompat":false,"preserveScriptOrder":false},"legacy":{"collections":false}}',"blog",["Map",11,12,29,30],"react-text-note",{id:11,data:13,body:24,filePath:25,digest:26,legacyId:27,deferredRender:28},{title:14,description:15,pubDate:16,image:17,draft:18,categories:19,tags:21},"React 文档笔记","前段时间阅读 React 官方文档时, 顺手记录了一些个人认为比较重要的知识点作为笔记",["Date","2025-04-02T16:00:00.000Z"],"/image/image2.jpg",!1,[20],"tech",[22,23],"React","笔记","## React 文档笔记\r\n\r\n前段时间阅读 React 官方文档时, 顺手记录了一些个人认为比较重要的知识点作为笔记, 都是比较基础的知识<br/>\r\n(如果发现有误, 请联系我)\r\n\r\n1.  style 写法: `{{  }}`\r\n\r\n2.  tailwind 与 组件库容易冲突, 支持 tailwind 的组件库: heroui(最好使用 next.js 在搭建项目时直接一起搭建)\r\n\r\n3.  \\export default 默认导出, export 具名导出, 有很多区别, 可以自己思考一下\r\n\r\n4.  建议将 props 解构使用并提供默认值(默认值只会对 undefined 生效)\r\n\r\n5.  大量组件渲染, 涉及变动时建议添加 key 进行绑定\r\n\r\n6.  列表渲染组件 map 返回 tsx(同样记得加 key) 或者 fliter 返回 过滤后数组 (=> 直接少量数据返回 或者 => \\{return ...})\r\n\r\n7.  `<>` 及 `</>` 不可添加 key, 此时替换为 `<Fragment>` 或 `</ Fragment>`\r\n\r\n8.  组件不应当更改任何值, 只负责进行渲染\r\n\r\n9.  命名惯例: 按照惯例，通常将事件处理程序命名为 `handle`，后接事件名\r\n\r\n10. 某些浏览器事件具有与事件相关联的默认行为, 例:点击 `<form>` 表单内部的按钮会触发表单提交事件，默认情况下将重新加载整个页面, 应当使用 e.preventDefault() 进行阻止\r\n\r\n11. 使用 `e.stopPropagation()` 阻止冒泡\r\n\r\n12. `{ }` 内部应当传递事件而非函数调用, 实际上, 传递函数调用的话将在每次渲染时被运行\r\n\r\n13. [`useState`](https://zh-hans.react.dev/reference/react/useState) 最终提供功能: **State 变量** 用于保存渲染间的数据, **State setter 函数** 更新变量并触发 React 再次渲染组件\r\n\r\n14. hooks 依托于一个稳定的调用顺序\r\n\r\n15. react 渲染机制: 初次渲染根组件, 之后渲染 被更新的组件 及 其子组件( 递归过程 ), 在开发环境中，React 会在组件首次挂载后立即重新挂载一次, 以便于发现各种问题\r\n\r\n16. state setter 处理机制: react 将会收集 该事件处理函数 中的所有更新(需要重新渲染组件的操作), 并在该函数执行完毕后 **一次性** 合并更新并触发重新渲染, 在 react 18 前, 异步函数中的所有更新将被 **立刻执行** ,但在 react 18 后, 异步函数中的更新同样将被收集并合并更新\r\n\r\n17. 使用函数式更新可以在末尾集中运行时, 每次运行后及时更新 state 的值(但是还是可以被后面的赋值给覆盖)\r\n\r\n18. ```jsx\r\n    import { useState } from 'react';\r\n\r\n    export default function Counter() {\r\n      const [number, setNumber] = useState(0);\r\n\r\n      return (\r\n        <>\r\n          \\<h1>{number}\\</h1>\r\n          <button onClick={() => {\r\n            setNumber(number + 5);\r\n            setNumber(n => n + 1);\r\n            setNumber(42);\r\n          }}>增加数字\\</button>\r\n        </>\r\n      )\r\n    }\r\n    ```\r\n\r\n    结果:\r\n\r\n| 更新步骤                | 队列中的值变化 | 说明                       |\r\n| :---------------------- | :------------- | :------------------------- |\r\n| 初始值                  | `0`            | 渲染时的初始状态           |\r\n| `setNumber(0 + 5)`      | 计划更新为 `5` | 基于当前值 `0`             |\r\n| `setNumber(n => n + 1)` | 计划更新为 `6` | 基于前一次队列值 `5`       |\r\n| `setNumber(42)`         | 覆盖为 `42`    | 直接赋值，忽略前序计算结果 |\r\n| **最终结果**            | **`42`**       | 最后一次更新覆盖所有前序值 |\r\n\r\n19. 使用展开语法 `[...a, b]` 或 `{ ...a, b:'b'}` 可以进行数组或对象的快速合并, 在对象中使用 [ ] 可以做到动态命名\r\n\r\n20. 使用 `useImmer` 代替 `useState` 可以更快和更直接地更新对象\r\n\r\n21. react 中推荐与不推荐使用的数组方法\r\n\r\n   \r\n\r\n|          | 避免使用 (会改变原始数组)     | 推荐使用 (会返回一个新数组） )                               |\r\n| -------- | ----------------------------- | ------------------------------------------------------------ |\r\n| 添加元素 | `push`，`unshift`             | `concat`，`[...arr]` 展开语法（[例子](https://zh-hans.react.dev/learn/updating-arrays-in-state#adding-to-an-array)） |\r\n| 删除元素 | `pop`，`shift`，`splice`      | `filter`，`slice`（[例子](https://zh-hans.react.dev/learn/updating-arrays-in-state#removing-from-an-array)） |\r\n| 替换元素 | `splice`，`arr[i] = ...` 赋值 | `map`（[例子](https://zh-hans.react.dev/learn/updating-arrays-in-state#replacing-items-in-an-array)） |\r\n| 排序     | `reverse`，`sort`             | 先将数组复制一份（[例子](https://zh-hans.react.dev/learn/updating-arrays-in-state#making-other-changes-to-an-array)） |\r\n22. 对象并不是 _真的_ 位于数组“内部”, 可能他们在代码中看起来像是在数组“内部”. 同样 对象并不是真的嵌套, 只是看起来像嵌套\r\n\r\n23. state 设置原则: **使 state 易于更新而不引入错误** , 例: 少使用 Boolean 类型的 state, 而将其直接命名为各种状态\r\n\r\n24. 初始 state 命名惯例: 以 `initial` 或 `default` 开头\r\n\r\n25. state 不建议多层嵌套, 建议扁平化处理, 使用 递归 对子元素进行渲染和使用 递归 对子元素进行处理\r\n\r\n26. 可以在组件中间添加 JSX 等内容, 将作为 children 特殊属性传给组件\r\n\r\n27. 在 react 中, **UI 树中 **相同位置的相同组件会被视为同一个组件, state 会被保留下来, 而在一般情况下, 组件被销毁后, state 会被重置\r\n\r\n28. 使用 key 可以很方便地独立组件并重置 state, 想要在这种情况下保留 state 的话, 请使用状态提升\r\n\r\n29. 复杂情况下 useState 的代替: useReducer, reducer 可以整合状态逻辑, 增加代码的可理解性和易维护性\r\n\r\n    `const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);`\r\n\r\n    给予初始值: initailTasks, 集中处理函数: tasksReducer, 初始值及后续更改后的值将被封装在 tasks 中, 使用 dispatch 将触发 tasksReducer 函数\r\n\r\n```jsx\r\nfunction tasksReducer(tasks, action) {\r\n          switch (action.type) {\r\n            case 'added': {\r\n              return ...;\r\n            }\r\n            case 'changed': {\r\n              return ...;\r\n            case 'deleted': {\r\n              return ...;\r\n            }\r\n            default: {\r\n              throw Error('未知 action: ' + action.type);\r\n            }\r\n          }\r\n        }\r\n```\r\n\r\ntasksReducer 函数中集中处理 tasks 变化, 通过 switch 来对应 action 中传递的各种情况并 return 处理后的 tasks(使用 action 中的参数对 tasks 进行修改), 还可以使用 default 进行意外的错误处理\r\n\r\n在对应情况的函数中, 使用 `dispatch(action)` 分发 action 触发 tasksReducer 函数, 便会根据 dispatch 中 type 的值使用对应的 switch 进行 tasks 的对应处理\r\n\r\n30. 使用 context 代替 props 层层透传\r\n\r\n    首先, 创建一个 context (一般在新的文件中),\r\n\r\n    例: `export const LevelContext = createContext(1);`\r\n\r\n    其中 `creatContext()` 中的为初始值, LevelContext 为创建后的 context 名\r\n\r\n    然后, 在需要应用的组件(注意: 指最终接收和应用 context 的子组件)中导入 LevelContext ,\r\n\r\n    使用 useContext 将它赋值给一个变量以便投入使用,\r\n\r\n    例: `const level = useContext(LevelContext);`\r\n\r\n    此后, 可以在该组件中使用 level 作为正常变量进行对应的操作\r\n\r\n    最后, 在需要进行透传的组件中(上文子组件的父组件)中使用 level 作为 props, 并在定义组件时, 引入 LevelContext 并用其包裹子组件\r\n\r\n例:\r\n\r\n```jsx\r\nimport { LevelContext } from './LevelContext.js';\r\n\r\nexport default function Section({ level, children }) {\r\n  return (\r\n    <section className=\"section\">\r\n     <LevelContext value={level}> //传给子组件的值\r\n        {children}\r\n      </LevelContext>\r\n    </section>\r\n  );\r\n}\r\n```\r\n\r\n此后, context 便会在组件间进行透传(可以传到上文的两种组件中), 并会穿过中间层级的组件\r\n\r\n31. ts 中, 可以使用 `:React.FC<{}>` 快捷地为传入的 props 中的各项数据进行类型声明\r\n32. `Object.keys(obj)` 方法可以快速地得到 obj 的键名组成的数组\r\n33. context 及 reducer 函数在多数时候可以使用 store 库进行代替, store 库中的状态更改时也会触发重新渲染\r\n34. 每次组件触发重新渲染时, 常规变量的值都会被重置, 想要保存变量的值, 应当使用 useState 或者 useRef\r\n35. 函数: useRef\r\n\r\n    使用 `const ref = useRef(0);` 创建一个 ref, 括号中为提供的初始值\r\n\r\n    然而, ref 返回的是一个对象 `{ current: 0  // 你向 useRef 传入的值 }` 在组件中应当使用 ref.current 访问储存的值\r\n\r\n36. ref 与 state 异同\r\n\r\n    | ref                                                     | state                                                                                                                  |\r\n    | ------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\r\n    | `useRef(initialValue)`返回 `{ current: initialValue }`  | `useState(initialValue)` 返回 state 变量的当前值和一个 state 设置函数 ( `[value, setValue]`)                           |\r\n    | 更改时不会触发重新渲染                                  | 更改时触发重新渲染。                                                                                                   |\r\n    | 可变 —— 你可以在渲染过程之外修改和更新 `current` 的值。 | “不可变” —— 你必须使用 state 设置函数来修改 state 变量，从而排队重新渲染。                                             |\r\n    | 你不应在渲染期间读取（或写入） `current` 值。           | 你可以随时读取 state。但是，每次渲染都有自己不变的 state [快照](https://zh-hans.react.dev/learn/state-as-a-snapshot)。 |\r\n\r\n    ref 可以被便利地更改: 不需要使用 set 函数\r\n\r\n    ref **不是快照**, state 则是, 例如在异步操作中, state 被提交后则固定, 而 ref 在操作执行前仍可以更改并将变化反应到结果上, 所以 ref 也常常被用于各种异步操作中\r\n\r\n    ref **不会**触发浏览器的重新渲染, 所以它不应当被使用在与 DOM 相关的变化中, 相反, 在一些频繁触发的操作中, 使用 ref 可以极大地优化性能: 例如: 制作秒表, 制作防抖函数中\r\n\r\n37. 使用 `element.scrollIntoView()` 方法将元素滚动到视野中, 可传入参数对象:\r\n\r\n```\r\n        {\r\n          behavior: '...',\r\n          block: '...',\r\n          inline: '...'\r\n        }\r\n```\r\n\r\n38. ref 在很多时候被用来控制 DOM , 处理一些 react 无法处理的 DOM 事件, 常见示例包括管理焦点、滚动位置或调用 React 未暴露的浏览器 API, 但是，如果尝试手动 **修改** DOM，则可能会与 React 所做的更改发生冲突, **尽量不要这么做**\r\n\r\n    要实现功能, 首先: `const myRef = useRef(null);` 将 ref 设置为null\r\n\r\n    之后, 将 DOM 绑定在 JSX 上: `<div ref={myRef}>`\r\n\r\n    在 DOM 节点被创建时, React 会把对该节点的引用放入 `myRef.current` , 然后便可以访问这个 DOM 元素\r\n\r\n39. 可以使用 ref 回调更精确地控制 ref: 即**将函数传递给 `ref` 属性**以控制 ref 在不同情况下的各种状态\r\n\r\n40. 如同其他 props , ref 也可以被传给子元素, 便可以透过父元素控制子元素状态\r\n\r\n    可以使用 `useImperativeHandle` 控制父元素可以访问的子元素特性的范围\r\n\r\n    配置: `useImperativeHandle(ref, createHandle, [deps])`\r\n\r\n    - `ref`：传递给组件的 `ref`。\r\n    - `createHandle`：返回一个对象，该对象就是暴露给父组件的实例值。\r\n    - `[deps]`：可选参数，是一个依赖数组，当依赖项发生变化时，`createHandle` 会重新执行。\r\n\r\n41. 使用 flushSync 可以使 set state 函数不等待更新队列立刻更新 DOM\r\n\r\n    配置: `flushSync(callback)`\r\n\r\n    `callback`：一个回调函数，在该函数中进行状态更新操作。\r\n\r\n42. **Effect** 是 React 范式中的一种脱围机制, 它**允许你指定由渲染自身，而不是特定事件引起的副作用**。\r\n\r\n    Effect 在 [提交](https://zh-hans.react.dev/learn/render-and-commit) 结束后、页面更新后运行: 此时是将 React 组件与外部系统（如网络或第三方库）同步的最佳时机。\r\n\r\n43. Effect 的使用:\r\n\r\n    导入 Effect 后 **`( import { useEffect } from 'react')`** , 在组件顶部进行调用\r\n\r\n    ```jsx\r\n    function MyComponent() {\r\n     useEffect(() => {\r\n        // 每次渲染后都会执行此处的代码\r\n\r\n      });\r\n\r\n      return <div />;\r\n    ```\r\n\r\n    简单来讲, **`useEffect` 会“延迟”一段代码的运行，直到渲染结果反映在页面上**\r\n\r\n44. useEffect 还可以接收第二个参数: 依赖数组,\r\n\r\n    当无依赖数组时: 在每次渲染后调用\r\n\r\n    当存在依赖数组时, 需要将 Effect 中使用的参数放入其中, 否则会报错\r\n\r\n    - 当依赖数组为空时: 在组件挂载后调用(注意)\r\n\r\n    - 使用正常的依赖数组时, 依赖数组中的 **任意元素变化** 将调用 Effect (注意: Effect 为浅比较)\r\n\r\n45. 按需添加清理（cleanup）函数: 因为在每次渲染后都会调用 Effect , 所以 Effect 产生的副作用应当被及时进行清理\r\n\r\n    可以在 Effect 中返回一个 **清理（cleanup）函数**, React 会在每次 Effect 重新运行之前调用清理函数，并在组件卸载（被移除）时最后一次调用清理函数","src/content/blog/React-text-note.mdx","4b041b6c96fc2afc","React-text-note.mdx",!0,"about-my-blog",{id:29,data:31,body:41,filePath:42,digest:43,rendered:44,legacyId:59},{title:32,description:33,pubDate:34,image:35,draft:18,categories:36,tags:38},"博客搭建成功","关于我的博客的小故事和我想说的话",["Date","2025-04-09T16:00:00.000Z"],"/image/image1.jpg",[37],"life",[39,40],"日常","Blog",'## 博客搭建成功\r\n\r\n当我写下这篇文章时, 代表我的博客终于要搭建完成了. 在看到不少佬的 so cooool 的博客后, 觉得有博客这件事蛮帅, 于是便临时起意想搞个自己的博客. 现在写着文章, 才发现自己写点东西磕磕绊绊的, 写过的作文都还给老师了, 哈哈.\r\n\r\n开始也是雄性壮志想搞个自己的框架, 后来发现自己是只癞蛤蟆想吃天鹅肉... 后面挑了好久, 选择了大家看到的这个博客框架(看着还是挺不错嘛). 从起意到准备到尝试到实践, 前前后后可能也花了 20 天左右? 途中遇到了不少小问题, 但综合来说还是没有自己预想的那么困难. 希望以后能在博客上多更新一些东西吧(看到我断更了请踢我谢谢). 做博客的过程也见识了不少的新技术, 总体来说还是挺有意思的.\r\n\r\n现在写点感想?\r\n\r\n单从作息和管束来讲, 大学就是爽哈. 每天这这那那, 然后感觉就像哦哦啊啊呃呃噢噢噢哦哦...... 我以前就在想: 如果以后能做什么电什么信息什么实验巴拉巴拉之类的专业和工作一定会很帅和很爽, 但说实话是阴差阳错进入了计算机的领域; 阴差阳错捡起了我手中的笔记本然后估计再也放不开; 阴差阳错发现自己已经走到了这里, 回头一望发现已经走了挺远的路但是还有更远更远的路要走...... 也许电脑和代码是一种挺有趣, 挺时髦, 挺 cool 的玩意? 反正学着好像没有高数那么要我命, 哈哈.\r\n\r\n_--"长者有云: 世上有一颗高高的树, 上面挂满了人"_\r\n\r\n希望这个博客能见证我的成长, 也希望我能带着这个 blog 尽量地走下去... 在这个 backyard 中, 我尽力地写一些我的技术的 “小巧思” 吧, 如果兴致来了也有可能会记录自己的生活或者写一些呜呜噫噫啊啊的小故事? 谁知道呢.\r\n\r\n希望能收集各位大佬的友链! 希望你们主动联系我, 不要逼我求你们😗. 如果有哪位 bro 或者 sis 想借我的博客发一些东西, 也可以联系我哦.\r\n\r\n可以在留言区里留言! 写一些 想对我 | 想对这个博客 说的话或者提的建议, 也许你也可以通过上面留下的联系方式联系我, 咱们偷偷地唠两句?\r\n\r\n最后再介绍一下这个博客:\r\n\r\n**Hi, I\'m Youngestar!**\r\n\r\n这里是我的后院\r\n\r\n是一名前端的开发者和学习者, 目前还是技术小白\r\n\r\n希望能做一个很有趣的人, 希望能一直向前进\r\n\r\n与君共勉✌️',"src/content/blog/about-my-blog.md","c842ec13454d2ec9",{html:45,metadata:46},'<h2 id="博客搭建成功">博客搭建成功</h2>\n<p>当我写下这篇文章时, 代表我的博客终于要搭建完成了. 在看到不少佬的 so cooool 的博客后, 觉得有博客这件事蛮帅, 于是便临时起意想搞个自己的博客. 现在写着文章, 才发现自己写点东西磕磕绊绊的, 写过的作文都还给老师了, 哈哈.</p>\n<p>开始也是雄性壮志想搞个自己的框架, 后来发现自己是只癞蛤蟆想吃天鹅肉… 后面挑了好久, 选择了大家看到的这个博客框架(看着还是挺不错嘛). 从起意到准备到尝试到实践, 前前后后可能也花了 20 天左右? 途中遇到了不少小问题, 但综合来说还是没有自己预想的那么困难. 希望以后能在博客上多更新一些东西吧(看到我断更了请踢我谢谢). 做博客的过程也见识了不少的新技术, 总体来说还是挺有意思的.</p>\n<p>现在写点感想?</p>\n<p>单从作息和管束来讲, 大学就是爽哈. 每天这这那那, 然后感觉就像哦哦啊啊呃呃噢噢噢哦哦… 我以前就在想: 如果以后能做什么电什么信息什么实验巴拉巴拉之类的专业和工作一定会很帅和很爽, 但说实话是阴差阳错进入了计算机的领域; 阴差阳错捡起了我手中的笔记本然后估计再也放不开; 阴差阳错发现自己已经走到了这里, 回头一望发现已经走了挺远的路但是还有更远更远的路要走… 也许电脑和代码是一种挺有趣, 挺时髦, 挺 cool 的玩意? 反正学着好像没有高数那么要我命, 哈哈.</p>\n<p><em>—“长者有云: 世上有一颗高高的树, 上面挂满了人”</em></p>\n<p>希望这个博客能见证我的成长, 也希望我能带着这个 blog 尽量地走下去… 在这个 backyard 中, 我尽力地写一些我的技术的 “小巧思” 吧, 如果兴致来了也有可能会记录自己的生活或者写一些呜呜噫噫啊啊的小故事? 谁知道呢.</p>\n<p>希望能收集各位大佬的友链! 希望你们主动联系我, 不要逼我求你们😗. 如果有哪位 bro 或者 sis 想借我的博客发一些东西, 也可以联系我哦.</p>\n<p>可以在留言区里留言! 写一些 想对我 | 想对这个博客 说的话或者提的建议, 也许你也可以通过上面留下的联系方式联系我, 咱们偷偷地唠两句?</p>\n<p>最后再介绍一下这个博客:</p>\n<p><strong>Hi, I’m Youngestar!</strong></p>\n<p>这里是我的后院</p>\n<p>是一名前端的开发者和学习者, 目前还是技术小白</p>\n<p>希望能做一个很有趣的人, 希望能一直向前进</p>\n<p>与君共勉✌️</p>',{headings:47,localImagePaths:50,remoteImagePaths:51,frontmatter:52,imagePaths:58},[48],{depth:49,slug:32,text:32},2,[],[],{title:32,description:33,pubDate:53,image:35,categories:54,tags:55,totalCharCount:56,readingTime:57},"04 10 2025",[37],[39,40],820,3,[],"about-my-blog.md"];export{r as default};
