class g extends HTMLElement{abortController=null;githubToken="";connectedCallback(){this.abortController=new AbortController;const t=this.getAttribute("data-username"),e=this.getAttribute("data-repo");t&&(e&&e?this.fetchRepoData(t,e,this.abortController.signal):this.fetchUserData(t,this.abortController.signal))}disconnectedCallback(){this.abortController&&(this.abortController.abort(),this.abortController=null)}getRequestOptions(t){const e={Accept:"application/vnd.github.v3+json"};return this.githubToken&&(e.Authorization=`token ${this.githubToken}`),{method:"GET",headers:e,signal:t}}async fetchWithRetry(t,e,r=2){try{const a=await fetch(t,e);if(a.status===403&&a.headers.get("X-RateLimit-Remaining")==="0"){const o=a.headers.get("X-RateLimit-Reset"),s=o?new Date(1e3*parseInt(o)):new Date;throw console.warn(`GitHub API rate limit exceeded. Resets at ${s.toLocaleTimeString()}`),new Error("GitHub API rate limit exceeded")}return a}catch(a){if(r<=0||a instanceof DOMException&&a.name==="AbortError")throw a;return await new Promise(o=>setTimeout(o,1e3)),this.fetchWithRetry(t,e,r-1)}}getCachedData(t){try{const e=localStorage.getItem(`github-stats:${t}`);if(e){const{data:r,timestamp:a}=JSON.parse(e);if(Date.now()-a<864e5)return r}}catch(e){console.warn("Error reading from cache:",e)}return null}cacheData(t,e){try{localStorage.setItem(`github-stats:${t}`,JSON.stringify({data:e,timestamp:Date.now()}))}catch(r){console.warn("Error writing to cache:",r)}}async fetchRepoData(t,e,r){const a=`repo:${t}/${e}`,o=this.getCachedData(a);if(o)return console.log("Using cached repository data"),this.updateRepoUI(o),void this.renderCommitGraph();this.showLoading();try{const s=`https://api.github.com/repos/${t}/${e}`,i=await this.fetchWithRetry(s,this.getRequestOptions(r));if(!i.ok)throw new Error(`Failed to fetch repository data: ${i.status}`);const n=await i.json();this.cacheData(a,n),this.updateRepoUI(n),this.renderCommitGraph()}catch(s){if(s instanceof DOMException&&s.name==="AbortError")console.log("Fetch aborted");else{console.error("Error fetching repository data:",s);let i="Failed to load repository data";s instanceof Error&&s.message.includes("rate limit")?i="GitHub API rate limit exceeded. Please try again later.":s instanceof Error&&s.message.includes("403")&&(i="Access to GitHub API is restricted. This might be due to rate limiting."),this.showError(i)}}}async fetchUserData(t,e){const r=`user:${t}`,a=this.getCachedData(r);if(a)return console.log("Using cached user data"),void this.updateUserUI(a.userData,a.totalStars);this.showLoading();try{const o=`https://api.github.com/users/${t}`,s=await this.fetchWithRetry(o,this.getRequestOptions(e));if(!s.ok)throw new Error(`Failed to fetch user data: ${s.status}`);const i=await s.json();let n=0;for(let h=1;h<=5;h++){const d=`https://api.github.com/users/${t}/repos?per_page=100&page=${h}`,c=await this.fetchWithRetry(d,this.getRequestOptions(e));if(!c.ok)break;const u=await c.json();if(u.length===0)break;u.forEach(l=>{n+=l.stargazers_count||0})}this.cacheData(r,{userData:i,totalStars:n}),this.updateUserUI(i,n)}catch(o){if(o instanceof DOMException&&o.name==="AbortError")console.log("Fetch aborted");else{console.error("Error fetching user data:",o);let s="Failed to load user data";o instanceof Error&&o.message.includes("rate limit")?s="GitHub API rate limit exceeded. Please try again later.":o instanceof Error&&o.message.includes("403")&&(s="Access to GitHub API is restricted. This might be due to rate limiting."),this.showError(s)}}}showLoading(){}updateRepoUI(t){const e=this.querySelector(".gh-description");if(e&&(e.textContent=t.description||"No description provided"),this.updateTextContent(".gh-stars",this.formatNumber(t.stargazers_count)),this.updateTextContent(".gh-forks",this.formatNumber(t.forks_count)),this.updateTextContent(".gh-watchers",this.formatNumber(t.subscribers_count||t.watchers_count)),t.created_at&&this.updateTextContent(".gh-created",`Created: ${this.formatDate(t.created_at)}`),t.updated_at&&this.updateTextContent(".gh-updated",`Updated: ${this.formatDate(t.updated_at)}`),t.default_branch&&this.updateTextContent(".gh-branch",`Default: ${t.default_branch}`),t.license&&t.license.name){const r=this.querySelector(".gh-license span:last-child");if(r){const a=t.license.name;r.textContent=a,r instanceof HTMLElement&&(r.title=a)}}if(t.owner&&t.owner.avatar_url){const r=this.querySelector(".gh-avatar");r&&(r.src=t.owner.avatar_url)}}updateUserUI(t,e){const r=this.querySelector(".gh-description");if(r&&(r.textContent=t.bio||`GitHub profile for ${t.login}`),this.updateTextContent(".gh-stars",this.formatNumber(e)),this.updateTextContent(".gh-forks",this.formatNumber(t.public_repos)),this.updateTextContent(".gh-watchers",this.formatNumber(t.followers)),t.avatar_url){const a=this.querySelector(".gh-avatar");a&&(a.src=t.avatar_url)}}renderCommitGraph(){const t=this.querySelector(".gh-commit-graph");if(!t)return;const e=t.querySelector(".grid");if(e){e.innerHTML="";for(let r=0;r<56;r++){const a=document.createElement("div"),o=Math.floor(5*Math.random());a.className=`w-3 h-3 rounded-sm bg-primary opacity-${20*o||10}`,a.title=`${o} commits`,e.appendChild(a)}}}showError(t){const e=this.querySelector(".gh-description");e&&(e.textContent=t),this.updateTextContent(".gh-stars","-"),this.updateTextContent(".gh-forks","-"),this.updateTextContent(".gh-watchers","-"),this.updateTextContent(".gh-created","Created: -"),this.updateTextContent(".gh-updated","Updated: -"),this.updateTextContent(".gh-branch","Default: -")}updateTextContent(t,e){const r=this.querySelector(t);r&&(r.textContent=e)}formatNumber(t){return t?t>=1e6?(t/1e6).toFixed(1)+"M":t>=1e3?(t/1e3).toFixed(1)+"K":t.toString():"0"}formatDate(t){return new Date(t).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}}customElements.get("github-stats")||customElements.define("github-stats",g);
